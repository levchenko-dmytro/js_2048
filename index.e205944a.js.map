{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/scripts/modules/grid.js","src/scripts/modules/cell.js","src/scripts/modules/tile.js"],"sourcesContent":["\"use strict\";\nclass $b9adbada10291250$export$f6f0c3fe4ec306ea {\n    constructor(gridElement, x, y){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        gridElement.append(cell);\n        this.x = x;\n        this.y = y;\n    }\n    linkTile(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTile = tile;\n    }\n    unlinkTile() {\n        this.linkedTile = null;\n    }\n    isEmpty() {\n        return !this.linkedTile;\n    }\n    linkTileForMerge(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTileForMerge = tile;\n    }\n    unlinkTileForMerge() {\n        this.linkedTileForMerge = null;\n    }\n    hasTileForMerge() {\n        return this.linkedTileForMerge;\n    }\n    canAccept(newTile) {\n        return this.isEmpty() || !this.hasTileForMerge() && this.linkedTile.value === newTile.value;\n    }\n    mergeTiles() {\n        this.linkedTile.setValue(this.linkedTile.value * 2);\n        this.linkedTile.removeClassList();\n        this.linkedTileForMerge.removeFromDOM();\n        this.unlinkTileForMerge();\n    }\n    getCellValue() {\n        return this.linkedTile ? this.linkedTile.getTileValue() : 0;\n    }\n}\n\n\n\"use strict\";\nconst $e8dda92e17598397$var$gridSize = 4;\nconst $e8dda92e17598397$var$cellsCount = $e8dda92e17598397$var$gridSize * $e8dda92e17598397$var$gridSize;\nclass $e8dda92e17598397$export$ef2184bd89960b14 {\n    constructor(gridElement){\n        this.cells = [];\n        for(let i = 0; i < $e8dda92e17598397$var$cellsCount; i++)this.cells.push(new (0, $b9adbada10291250$export$f6f0c3fe4ec306ea)(gridElement, i % $e8dda92e17598397$var$gridSize, Math.floor(i / $e8dda92e17598397$var$gridSize)));\n        this.cellsGroupedByColumn = this.groupCellsByColumn();\n        this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map((column)=>[\n                ...column\n            ].reverse());\n        this.cellsGroupedByRow = this.groupCellsByRow();\n        this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map((row)=>{\n            return [\n                ...row\n            ].reverse();\n        });\n    }\n    getRandomEmptyCell() {\n        const emptyCells = this.cells.filter((cell)=>cell.isEmpty());\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        return emptyCells[randomIndex];\n    }\n    groupCellsByColumn() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.x] = groupedCells[cell.x] || [];\n            groupedCells[cell.x][cell.y] = cell;\n            return groupedCells;\n        }, []);\n    }\n    groupCellsByRow() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.y] = groupedCells[cell.y] || [];\n            groupedCells[cell.y][cell.x] = cell;\n            return groupedCells;\n        }, []);\n    }\n}\n\n\n\"use strict\";\nconst $2bd70f45f44028f3$var$tileTwo = 2;\nconst $2bd70f45f44028f3$var$tileFour = 4;\nconst $2bd70f45f44028f3$var$chanceToGetOneOfTiles = 0.9;\nclass $2bd70f45f44028f3$export$235cb65c20ad2b7 {\n    constructor(gridElement){\n        this.tileElement = document.createElement(\"div\");\n        this.tileElement.classList.add(\"tile\");\n        this.setValue(Math.random() >= $2bd70f45f44028f3$var$chanceToGetOneOfTiles ? $2bd70f45f44028f3$var$tileFour : $2bd70f45f44028f3$var$tileTwo);\n        gridElement.append(this.tileElement);\n    }\n    setXY(x, y) {\n        this.x = x;\n        this.y = y;\n        this.tileElement.style.setProperty(\"--x\", x);\n        this.tileElement.style.setProperty(\"--y\", y);\n    }\n    setValue(value) {\n        this.value = value;\n        this.tileElement.textContent = this.value;\n        this.tileElement.classList.add(`tile--${value}`);\n    }\n    removeFromDOM() {\n        this.tileElement.remove();\n    }\n    removeClassList() {\n        this.tileElement.classList.remove(`tile--${this.value / 2}`);\n    }\n    getTileValue() {\n        return this.value;\n    }\n    waitForTransitionEnd() {\n        return new Promise((resolve)=>{\n            this.tileElement.addEventListener(\"transitionend\", resolve, {\n                once: true\n            });\n        });\n    }\n}\n\n\n\"use strict\";\nlet $09e991522ca7e64e$var$scoreValue = 0;\nconst $09e991522ca7e64e$var$scoreToWin = 2048;\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$gameBoard = document.querySelector(\".game-board\");\nconst $09e991522ca7e64e$var$grid = new (0, $e8dda92e17598397$export$ef2184bd89960b14)($09e991522ca7e64e$var$gameBoard);\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$setupInputOnce();\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(new (0, $2bd70f45f44028f3$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(new (0, $2bd70f45f44028f3$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$button.classList.remove(\"start\");\n    $09e991522ca7e64e$var$button.classList.add(\"restart\");\n    $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    $09e991522ca7e64e$var$button.removeEventListener(\"click\", $09e991522ca7e64e$var$startGame);\n    $09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$restartGame);\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$grid.cells.forEach((cell)=>{\n        if (!cell.isEmpty()) {\n            cell.linkedTile.removeFromDOM();\n            cell.unlinkTile();\n        }\n    });\n    $09e991522ca7e64e$var$scoreValue = 0;\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$scoreValue;\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(new (0, $2bd70f45f44028f3$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(new (0, $2bd70f45f44028f3$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    $09e991522ca7e64e$var$setupInputOnce();\n}\nfunction $09e991522ca7e64e$var$setupInputOnce() {\n    window.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n}\nasync function $09e991522ca7e64e$var$handleInput(eventMove) {\n    switch(eventMove.key){\n        case \"ArrowUp\":\n            if (!$09e991522ca7e64e$var$canMoveUp()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveUp();\n            break;\n        case \"ArrowDown\":\n            if (!$09e991522ca7e64e$var$canMoveDown()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveDown();\n            break;\n        case \"ArrowLeft\":\n            if (!$09e991522ca7e64e$var$canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveLeft();\n            break;\n        case \"ArrowRight\":\n            if (!$09e991522ca7e64e$var$canMoveRight()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInputOnce();\n            return;\n    }\n    const newTile = new (0, $2bd70f45f44028f3$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(newTile);\n    if (!$09e991522ca7e64e$var$canMoveUp() && !$09e991522ca7e64e$var$canMoveDown() && !$09e991522ca7e64e$var$canMoveLeft() && !$09e991522ca7e64e$var$canMoveRight()) $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$setupInputOnce();\n}\nasync function $09e991522ca7e64e$var$moveUp() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByColumn);\n}\nasync function $09e991522ca7e64e$var$moveDown() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByReversedColumn);\n}\nasync function $09e991522ca7e64e$var$moveLeft() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByRow);\n}\nasync function $09e991522ca7e64e$var$moveRight() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByReversedRow);\n}\nasync function $09e991522ca7e64e$var$slideTiles(groupedCells) {\n    const promises = [];\n    groupedCells.forEach((group)=>$09e991522ca7e64e$var$slideTilesInGroup(group, promises));\n    await Promise.all(promises);\n    $09e991522ca7e64e$var$grid.cells.forEach((cell)=>{\n        if (cell.hasTileForMerge()) {\n            cell.mergeTiles();\n            $09e991522ca7e64e$var$scoreValue += cell.getCellValue();\n            $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$scoreValue;\n        }\n        if (cell.getCellValue() === $09e991522ca7e64e$var$scoreToWin) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    });\n}\nfunction $09e991522ca7e64e$var$slideTilesInGroup(group, promises) {\n    for(let i = 1; i < group.length; i++){\n        if (group[i].isEmpty()) continue;\n        const cellWithTile = group[i];\n        let targetCell;\n        let j = i - 1;\n        while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)){\n            targetCell = group[j];\n            j--;\n        }\n        if (!targetCell) continue;\n        promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n        if (targetCell.isEmpty()) targetCell.linkTile(cellWithTile.linkedTile);\n        else targetCell.linkTileForMerge(cellWithTile.linkedTile);\n        cellWithTile.unlinkTile();\n    }\n}\nfunction $09e991522ca7e64e$var$canMoveUp() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveDown() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByReversedColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveLeft() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByRow);\n}\nfunction $09e991522ca7e64e$var$canMoveRight() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByReversedRow);\n}\nfunction $09e991522ca7e64e$var$canMove(groupedCells) {\n    return groupedCells.some((group)=>$09e991522ca7e64e$var$canMoveInGroup(group));\n}\nfunction $09e991522ca7e64e$var$canMoveInGroup(group) {\n    return group.some((cell, index)=>{\n        if (!index || cell.isEmpty()) return false;\n        const targetCell = group[index - 1];\n        return targetCell.canAccept(cell.linkedTile);\n    });\n}\n\n\n//# sourceMappingURL=index.e205944a.js.map\n","\"use strict\";\n\nimport { Grid } from \"./modules/grid.js\";\nimport { Tile } from \"./modules/tile.js\";\n\nlet scoreValue = 0;\nconst scoreToWin = 2048;\nconst button = document.querySelector(\".button\");\nconst score = document.querySelector(\".game-score\");\nconst messageStart = document.querySelector(\".message-start\");\nconst messageLose = document.querySelector(\".message-lose\");\nconst messageWin = document.querySelector(\".message-win\");\nconst gameBoard = document.querySelector(\".game-board\");\nconst grid = new Grid(gameBoard);\n\nbutton.addEventListener(\"click\", startGame);\n\nfunction startGame() {\n  setupInputOnce();\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n\n  messageStart.classList.add(\"hidden\");\n  button.classList.remove(\"start\");\n  button.classList.add(\"restart\");\n  button.textContent = \"Restart\";\n\n  button.removeEventListener(\"click\", startGame);\n  button.addEventListener(\"click\", restartGame);\n}\n\nfunction restartGame() {\n  grid.cells.forEach((cell) => {\n    if (!cell.isEmpty()) {\n      cell.linkedTile.removeFromDOM();\n      cell.unlinkTile();\n    }\n  });\n\n  scoreValue = 0;\n  score.textContent = scoreValue;\n  messageLose.classList.add(\"hidden\");\n  messageWin.classList.add(\"hidden\");\n\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  setupInputOnce();\n}\n\nfunction setupInputOnce() {\n  window.addEventListener(\"keydown\", handleInput, { once: true });\n}\n\nasync function handleInput(eventMove) {\n  switch (eventMove.key) {\n    case \"ArrowUp\":\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveUp();\n      break;\n\n    case \"ArrowDown\":\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveDown();\n      break;\n\n    case \"ArrowLeft\":\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveLeft();\n      break;\n\n    case \"ArrowRight\":\n      if (!canMoveRight()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    messageLose.classList.remove(\"hidden\");\n  }\n\n  setupInputOnce();\n}\n\nasync function moveUp() {\n  await slideTiles(grid.cellsGroupedByColumn);\n}\n\nasync function moveDown() {\n  await slideTiles(grid.cellsGroupedByReversedColumn);\n}\n\nasync function moveLeft() {\n  await slideTiles(grid.cellsGroupedByRow);\n}\n\nasync function moveRight() {\n  await slideTiles(grid.cellsGroupedByReversedRow);\n}\n\nasync function slideTiles(groupedCells) {\n  const promises = [];\n\n  groupedCells.forEach((group) => slideTilesInGroup(group, promises));\n\n  await Promise.all(promises);\n\n  grid.cells.forEach((cell) => {\n    if (cell.hasTileForMerge()) {\n      cell.mergeTiles();\n      scoreValue += cell.getCellValue();\n      score.textContent = scoreValue;\n    }\n\n    if (cell.getCellValue() === scoreToWin) {\n      messageWin.classList.remove(\"hidden\");\n    }\n  });\n}\n\nfunction slideTilesInGroup(group, promises) {\n  for (let i = 1; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n\n    if (targetCell.isEmpty()) {\n      targetCell.linkTile(cellWithTile.linkedTile);\n    } else {\n      targetCell.linkTileForMerge(cellWithTile.linkedTile);\n    }\n\n    cellWithTile.unlinkTile();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsGroupedByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some((group) => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, index) => {\n    if (!index || cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n\n    return targetCell.canAccept(cell.linkedTile);\n  });\n}\n","\"use strict\";\n\nimport { Cell } from \"./cell.js\";\n\nconst gridSize = 4;\nconst cellsCount = gridSize * gridSize;\n\nexport class Grid {\n  constructor(gridElement) {\n    this.cells = [];\n\n    for (let i = 0; i < cellsCount; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % gridSize, Math.floor(i / gridSize)),\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(\n      (column) => [...column].reverse(),\n    );\n\n    this.cellsGroupedByRow = this.groupCellsByRow();\n\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map((row) => {\n      return [...row].reverse();\n    });\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter((cell) => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n}\n","\"use strict\";\n\nexport class Cell {\n  constructor(gridElement, x, y) {\n    const cell = document.createElement(\"div\");\n\n    cell.classList.add(\"cell\");\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return (\n      this.isEmpty() ||\n      (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\n    );\n  }\n\n  mergeTiles() {\n    this.linkedTile.setValue(this.linkedTile.value * 2);\n    this.linkedTile.removeClassList();\n    this.linkedTileForMerge.removeFromDOM();\n    this.unlinkTileForMerge();\n  }\n\n  getCellValue() {\n    return this.linkedTile ? this.linkedTile.getTileValue() : 0;\n  }\n}\n","\"use strict\";\n\nconst tileTwo = 2;\nconst tileFour = 4;\nconst chanceToGetOneOfTiles = 0.9;\n\nexport class Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement(\"div\");\n    this.tileElement.classList.add(\"tile\");\n\n    this.setValue(Math.random() >= chanceToGetOneOfTiles ? tileFour : tileTwo);\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty(\"--x\", x);\n    this.tileElement.style.setProperty(\"--y\", y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = this.value;\n    this.tileElement.classList.add(`tile--${value}`);\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n\n  removeClassList() {\n    this.tileElement.classList.remove(`tile--${this.value / 2}`);\n  }\n\n  getTileValue() {\n    return this.value;\n  }\n\n  waitForTransitionEnd() {\n    return new Promise((resolve) => {\n      this.tileElement.addEventListener(\"transitionend\", resolve, {\n        once: true,\n      });\n    });\n  }\n}\n"],"names":["$b9adbada10291250$export$f6f0c3fe4ec306ea","constructor","gridElement","x","y","cell","document","createElement","classList","add","append","linkTile","tile","setXY","linkedTile","unlinkTile","isEmpty","linkTileForMerge","linkedTileForMerge","unlinkTileForMerge","hasTileForMerge","canAccept","newTile","value","mergeTiles","setValue","removeClassList","removeFromDOM","getCellValue","getTileValue","$2bd70f45f44028f3$export$235cb65c20ad2b7","tileElement","Math","random","style","setProperty","textContent","remove","waitForTransitionEnd","Promise","resolve","addEventListener","once","$09e991522ca7e64e$var$scoreValue","$09e991522ca7e64e$var$button","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$gameBoard","$09e991522ca7e64e$var$grid","cells","i","$e8dda92e17598397$var$gridSize","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","row","getRandomEmptyCell","emptyCells","filter","randomIndex","length","reduce","groupedCells","$09e991522ca7e64e$var$restartGame","forEach","$09e991522ca7e64e$var$setupInputOnce","window","$09e991522ca7e64e$var$handleInput","eventMove","key","$09e991522ca7e64e$var$canMoveUp","$09e991522ca7e64e$var$moveUp","$09e991522ca7e64e$var$canMoveDown","$09e991522ca7e64e$var$moveDown","$09e991522ca7e64e$var$canMoveLeft","$09e991522ca7e64e$var$moveLeft","$09e991522ca7e64e$var$canMoveRight","$09e991522ca7e64e$var$moveRight","$09e991522ca7e64e$var$slideTiles","promises","group","$09e991522ca7e64e$var$slideTilesInGroup","targetCell","cellWithTile","j","all","$09e991522ca7e64e$var$canMove","some","index","$09e991522ca7e64e$var$startGame","removeEventListener"],"version":3,"file":"index.e205944a.js.map"}